import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../store";
import { addAUser, searchUsers, updateAUser } from "./userAPI";
import toast from "react-hot-toast";
import { IUser } from "definitions/app/user";

export interface userState {
  users: IUser[];
  status: "idle" | "loading" | "failed";
}

const initialState: userState = {
  users: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const searchUsersAsync = createAsyncThunk(
  "user/getall",
  async (companyId: string, thunkAPI) => {
    const res = await searchUsers(companyId);
    return res;
  }
);
export const addUserAsync = createAsyncThunk(
  "user/add",
  async (data: IUser, thunkAPI) => {
    const res = await addAUser(data);
    if (!res.success) return thunkAPI.rejectWithValue(res.message);
    return res;
  }
);
export const updateAUserAsync = createAsyncThunk(
  "user/update",
  async (data: IUser, thunkAPI) => {
    const res = await updateAUser(data);
    if (!res.success) return thunkAPI.rejectWithValue(res.message);
    return res;
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addUser: (state, action) => {
      state.users.unshift(action.payload);
    },
  },
  // The `extraReducers` field lets the services handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // search User
      .addCase(searchUsersAsync.pending, (state) => {
        state.status = "loading";
        toast.loading("Loading User", { id: searchUsersAsync.name });
      })
      .addCase(searchUsersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        console.log("users case", action.payload.data);
        state.users = action.payload.data;
        toast.success("User Loaded", { id: searchUsersAsync.name });
      })
      .addCase(searchUsersAsync.rejected, (state, action) => {
        state.status = "failed";
        toast.error((action.payload as string) ?? "Error in loading User", {
          id: searchUsersAsync.name,
        });
      })
      // add User
      .addCase(addUserAsync.pending, (state) => {
        state.status = "loading";
        toast.loading("Adding User...", { id: addUserAsync.name });
      })
      .addCase(addUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.users.unshift(action.payload.data);
        toast.success("User Added", { id: addUserAsync.name });
      })
      .addCase(addUserAsync.rejected, (state, action) => {
        state.status = "failed";
        toast.error((action.payload as string) ?? "Error in adding User", {
          id: addUserAsync.name,
        });
      })
      // update a User
      .addCase(updateAUserAsync.pending, (state) => {
        state.status = "loading";
        toast.loading("Saving User changes...", {
          id: updateAUserAsync.name,
        });
      })
      .addCase(updateAUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.users = state.users.map((item) => {
          if (action.payload.data._id === item._id) {
            return action.payload.data;
          }
          return item;
        });
        toast.success("User Saved.", { id: updateAUserAsync.name });
      })
      .addCase(updateAUserAsync.rejected, (state, action) => {
        state.status = "failed";
        toast.error(
          (action.payload as string) ?? "Error in saving User changes",
          {
            id: updateAUserAsync.name,
          }
        );
      });
  },
});

export const { addUser } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the services file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: RootState) => state.user;

export default userSlice.reducer;
