import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../store";
import { ILogin, ILoginUser } from "../../../definitions/app/auth";
import { getToken, parseJwt, removeToken, setToken } from "../UtilServices";
import { loginUser } from "./authAPI";
import toast from "react-hot-toast";

export interface AuthState {
  token: string | null;
  user: ILoginUser | null;
  status: "idle" | "loading" | "failed";
  isSystemUser: boolean;
}

const initialState: AuthState = {
  token: null,
  user: null,
  status: "idle",
  isSystemUser: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const loginUserAsync = createAsyncThunk(
  "auth/login/user",
  async (cred: ILogin, thunkAPI) => {
    const res = await loginUser(cred.email, cred.password, cred.login_type);
    console.info("res", res.data);
    // if (res.message !== "success") return thunkAPI.rejectWithValue(res.message);
    return res.data;
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    loadUser: (state) => {
      const token = getToken();
      state.token = token;
      if (token) {
        const decode = parseJwt(token);
        state.user = decode;
        state.isSystemUser = decode.isSystemUser === true;
      }
    },
    logout: (state) => {
      removeToken();
      state.token = null;
      state.user = null;
    },
  },
  // The `extraReducers` field lets the services handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // login user
      .addCase(loginUserAsync.pending, (state) => {
        state.status = "loading";
        toast.loading("verifying...", { id: loginUserAsync.name });
      })
      .addCase(loginUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.token = action.payload.access_token;

        if (action.payload.access_token) {
          setToken(action.payload.access_token);
          state.user = parseJwt(action.payload.access_access_token);
          state.isSystemUser = false;
          toast.success("Logged in", { id: loginUserAsync.name });
        } else {
          toast.error("Error in login", { id: loginUserAsync.name });
        }
      })
      .addCase(loginUserAsync.rejected, (state, action) => {
        state.status = "failed";
        toast.error((action.payload as string) ?? "Error in login", {
          id: loginUserAsync.name,
        });
      });
  },
});

export const { loadUser, logout } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the services file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAuth = (state: RootState) => state.auth;

export default authSlice.reducer;
